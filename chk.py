import json

ss='''
{
    "id": "1884c98b28d3ceb0",
    "threadId": "1884c98b28d3ceb0",
    "labelIds": [
        "IMPORTANT",
        "CATEGORY_PERSONAL",
        "INBOX"
    ],
    "snippet": "Best Regards, Phani Marupaka ---------- Forwarded message --------- From: &lt;briefly@brieflyai.com&gt; Date: Wed, May 24, 2023 at 11:37 AM Subject: Briefly | DevX &amp;lt;&amp;gt; Tech Marketing :",
    "payload": {
        "partId": "",
        "mimeType": "multipart/alternative",
        "filename": "",
        "headers": [
            {
                "name": "Delivered-To",
                "value": "preetish@zeta.tech"
            },
            {
                "name": "Received",
                "value": "by 2002:a05:7010:ac9b:b0:354:eb04:8af4 with SMTP id dv27csp122835mdb;        Wed, 24 May 2023 00:10:56 -0700 (PDT)"
            },
            {
                "name": "X-Received",
                "value": "by 2002:a17:907:2d2c:b0:96f:e5af:ac73 with SMTP id gs44-20020a1709072d2c00b0096fe5afac73mr9599802ejc.66.1684912255639;        Wed, 24 May 2023 00:10:55 -0700 (PDT)"
            },
            {
                "name": "ARC-Seal",
                "value": "i=1; a=rsa-sha256; t=1684912255; cv=none;        d=google.com; s=arc-20160816;        b=JVW0Xz3xq28tulq8ZNsqHpI50ikyX7nvtPnPOFgPuUIXY482tSvNbg5Kpyuq7rNI+s         pbuSMe9PWwY3gRbF2msnSMg7FTY3b3BxB6CAWyaxHH1lvFaR8NXW1xLdxfXCexFdjFRq         aYlgtsaqM5iJ54NLtpFydF5UStTwr6erV+2boH1PaWPxyvAmQ9iLDyJTMF1ci2Oi1ENB         VCJgbOiTiygAQgeepOJ5qnx2H1SxIaJy4JT9gj8dM7yv7NFWi0ZNPZSNEe5E1wBRnv49         IQ/crGBw2yRpXm9+S3QEWPvpXkJBDFVgNqCJKgulJTGFrQL82qDWP1WnZhjJ7tfTBXfB         OnFQ=="
            },
            {
                "name": "ARC-Message-Signature",
                "value": "i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com; s=arc-20160816;        h=to:subject:message-id:date:from:in-reply-to:references:mime-version         :dkim-signature;        bh=9nhthjVc8C8nowwEG3g1deH23t5UWXHSL9DOkI6DvYE=;        b=TipYkQaU9ytzqECm/hZLv9bOLl+i72PikKtF7hdn2dG8P1G2ESWztvVTxwiRYKgt89         B2u4DMcbg2WVs60rfBHo4vezDXsNanmjoN83pyo1S+Vx4DxcVBR1HcPHPUcpDgp6xLOx         U25KCisrKM5nFMyVN+SJHrfY1ZCDC2lYLKFWfOiNzOfhoJagH1Hw0TBgfnU1oHDopnka         qXvx+Hgarhk6x8wA8IZEbQDm6CCcvO+mIgms6RVt/Y5wJnE8XOXoJpId9COZ+gyi2dD4         FMU79us0vYTLrpKXyOTqDkaDg+zf1c35pLHNclpiZ5jNxrGGBuo4ADNKfDezg8N51hpw         apiQ=="
            },
            {
                "name": "ARC-Authentication-Results",
                "value": "i=1; mx.google.com;       dkim=pass header.i=@zeta.tech header.s=google header.b=quZV2dOh;       spf=pass (google.com: domain of phanim@zeta.tech designates 209.85.220.41 as permitted sender) smtp.mailfrom=phanim@zeta.tech;       dmarc=pass (p=REJECT sp=REJECT dis=NONE) header.from=zeta.tech"
            },
            {
                "name": "Return-Path",
                "value": "<phanim@zeta.tech>"
            },
            {
                "name": "Received",
                "value": "from mail-sor-f41.google.com (mail-sor-f41.google.com. [209.85.220.41])        by mx.google.com with SMTPS id vw13-20020a170907058d00b0096f712720dasor4654255ejb.9.2023.05.24.00.10.55        for <preetish@zeta.tech>        (Google Transport Security);        Wed, 24 May 2023 00:10:55 -0700 (PDT)"
            },
            {
                "name": "Received-SPF",
                "value": "pass (google.com: domain of phanim@zeta.tech designates 209.85.220.41 as permitted sender) client-ip=209.85.220.41;"
            },
            {
                "name": "Authentication-Results",
                "value": "mx.google.com;       dkim=pass header.i=@zeta.tech header.s=google header.b=quZV2dOh;       spf=pass (google.com: domain of phanim@zeta.tech designates 209.85.220.41 as permitted sender) smtp.mailfrom=phanim@zeta.tech;       dmarc=pass (p=REJECT sp=REJECT dis=NONE) header.from=zeta.tech"
            },
            {
                "name": "DKIM-Signature",
                "value": "v=1; a=rsa-sha256; c=relaxed/relaxed;        d=zeta.tech; s=google; t=1684912255; x=1687504255;        h=to:subject:message-id:date:from:in-reply-to:references:mime-version         :from:to:cc:subject:date:message-id:reply-to;        bh=9nhthjVc8C8nowwEG3g1deH23t5UWXHSL9DOkI6DvYE=;        b=quZV2dOhXi5g/TQXyhsaPXOy3KSeC2IPG+Q/+BNO+1KUQnRP5JpZkcLi+6GhRR0Bgr         +BSD8x5itCeEUaT2cg42L+jErV6R9vz2kZ6UsE9nJ0HYIXNe/WPh3Q0pmwB48MlHaxUd         4gjQ87Jv0uOgqM7k0CH/h0GsgngByl4dwslDmcU2FOH5fUaxKJsOVnsKo/Miy5Refu3O         cACm/S20YcRQYARD4EvYvDmWlvX4gW6u2ubwQgLID6LQO+w9KKwzlwofJMp60PD3uSS2         2aC0C+pBJcib/ZccrB516OfiOYqJ1D7w3S23NCHRVy1XGnpE7Ay2/54Dl+EK9Qa+xcmI         35lg=="
            },
            {
                "name": "X-Google-DKIM-Signature",
                "value": "v=1; a=rsa-sha256; c=relaxed/relaxed;        d=1e100.net; s=20221208; t=1684912255; x=1687504255;        h=to:subject:message-id:date:from:in-reply-to:references:mime-version         :x-gm-message-state:from:to:cc:subject:date:message-id:reply-to;        bh=9nhthjVc8C8nowwEG3g1deH23t5UWXHSL9DOkI6DvYE=;        b=JRk0YeTbQcNmG3HJP8zaBpC3PkrjyjpX5VMF2xamEow2fW8BHDKqGqxkxeVCUPzVQE         HBqGIivb1xKwjDGM7iWajz33/EPeHb3fJaPF82KedVYIy4abiLFUvuAjMNibNW6SnwhE         ow+KmIK7xXSa+H1bHqdi3QePcP1moByvJgHKpyyL/z/JCfZv0H1myfDNcIBQQD8LQqGT         NZ2UUG5aeVPAAmnk6wooM8bDD4n49pTmGZi3liLyCRZr04rRo/KnRPwvR7W8L4nWlr/Y         QS2bY7LjLBfw8H8pmOK+3Mybu63LxJafmvlCnoINNTLhLwoBZuB7Jq0sHA1Rs72vbzSA         lfvA=="
            },
            {
                "name": "X-Gm-Message-State",
                "value": "AC+VfDxOqy78v43616CzkSh9kjMdXmTma3OHr0vOnj0cW5S4195bP6t0 OuqAxFlalKUUYgfpGTSFwvTN96BGeIV2zfCjEyb9jYfAFaDhjN5An2QsxA=="
            },
            {
                "name": "X-Google-Smtp-Source",
                "value": "ACHHUZ7gZ2YHquZXT1q3MQSpIkTFoARNnyMNcTvu54gQbr+2K+7xgAAV/3KwGasqz1joFAHACAzHI02qhAxoPmw/SKo="
            },
            {
                "name": "X-Received",
                "value": "by 2002:a17:906:fd8e:b0:96f:44b0:b3c0 with SMTP id xa14-20020a170906fd8e00b0096f44b0b3c0mr14658681ejb.56.1684912254180; Wed, 24 May 2023 00:10:54 -0700 (PDT)"
            },
            {
                "name": "MIME-Version",
                "value": "1.0"
            },
            {
                "name": "References",
                "value": "<010101884c5e5606-54f15a25-361b-4a95-8627-8ef750dddada-000000@us-west-2.amazonses.com>"
            },
            {
                "name": "In-Reply-To",
                "value": "<010101884c5e5606-54f15a25-361b-4a95-8627-8ef750dddada-000000@us-west-2.amazonses.com>"
            },
            {
                "name": "From",
                "value": "Phani Marupaka <phanim@zeta.tech>"
            },
            {
                "name": "Date",
                "value": "Wed, 24 May 2023 12:40:16 +0530"
            },
            {
                "name": "Message-ID",
                "value": "<CACN=wt3qRj5ZuvZB-OFnDwqDn9T-QXHYOaZ5d4+0k_V3DahPhA@mail.gmail.com>"
            },
            {
                "name": "Subject",
                "value": "Fwd: Briefly | DevX &lt;&gt; Tech Marketing : Standup"
            },
            {
                "name": "To",
                "value": "Preeti Sharma <preetish@zeta.tech>"
            },
            {
                "name": "Content-Type",
                "value": "multipart/alternative; boundary=\"000000000000637b7705fc6b3448\""
            }
        ],
        "body": {
            "size": 0
        },
        "parts": [
            {
                "partId": "0",
                "mimeType": "text/plain",
                "filename": "",
                "headers": [
                    {
                        "name": "Content-Type",
                        "value": "text/plain; charset=\"UTF-8\""
                    },
                    {
                        "name": "Content-Transfer-Encoding",
                        "value": "quoted-printable"
                    }
                ],
                "body": {
                    "size": 39554,
                    "data": ""
                }
            },
            {
                "partId": "1",
                "mimeType": "text/html",
                "filename": "",
                "headers": [
                    {
                        "name": "Content-Type",
                        "value": "text/html; charset=\"UTF-8\""
                    },
                    {
                        "name": "Content-Transfer-Encoding",
                        "value": "quoted-printable"
                    }
                ],
                "body": {
                    "size": 81769,
                    "data": ""
                }
            }
        ]
    },
    "sizeEstimate": 130420,
    "historyId": "321527",
    "internalDate": "1684912216000"
}
'''

print(json.loads(ss))